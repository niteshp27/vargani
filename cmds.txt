
<<<<<-----------Tell Git who you are
First, you need to tell Git who you are:

git config --global user.email "you@example.com"
git config --global user.name "Your Name"

<<<<<-----------Clone a repository if required
git clone git@github.com:<your github account>/repo-name.git


<<<<<-----------

<<<<<-----------

<<<<<-----------

<<<<<-----------Check if git is setup and initialized
PS E:\nitesh\githubrepo\vargani> git status
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean

<<<<<-----------check branches and * points to current branch
PS E:\nitesh\githubrepo\vargani> git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
  remotes/origin/react-components


#######################
A:- seperate cmd for  branch creation and switch to created branch

<<<<<-----------Create branch and stay in same branch master
git branch react-components

<<<<<-----------change branch to react-components
PS E:\nitesh\githubrepo\vargani> git checkout react-components
Switched to a new branch 'react-components'
Branch react-components set up to track remote branch react-components from origin.
PS E:\nitesh\githubrepo\vargani> git branch
  master
* react-components


#######################
B:- seperate cmd for  branch creation and switch to created branch. Combine the two commands above and thereby create and checkout to a new branch in a single command by postfixing -b to the checkout command:
git checkout -b react-components


<<<<<-----------
PS E:\nitesh\githubrepo\vargani> git branch -a
  master
* react-components
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
  remotes/origin/react-components

<<<<<-----------Add files to git.
Git has a staging area, for files that you want to commit. Staging a file in Git’s terminology means adding it to the staging area, in preparation for a commit.

--single file
E.G.- "git add -a file-name.ext"

--all files
E.G.- "git add ."

<<<<<-----------commit files after adding them.
for adding refer 

"git add -a cmd above".

PS E:\nitesh\githubrepo\vargani> git commit -m "added git commands and node command to run teh app"
[react-components 412dc88] added git commands and node command to run teh app
 2 files changed, 37 insertions(+), 1 deletion(-)
 create mode 100644 cmds.txt

<<<<<-----------commits via editor


<<<<<-----------exit commit editor press "Esc" button and type ":wq" press "enter" to save and exit and press "Esc" button and type ":q!" "enter" button to exit


#######################
<<<<<-----------display all commits
PS E:\nitesh\githubrepo\vargani> git log
commit 412dc8811d2c09f1cfefa997f3cab6ecb94eff88 (HEAD -> react-components)
Author: Nitesh <niteshp27@gmail.com>
Date:   Fri Oct 6 13:33:59 2017 +0530

    added git commands and node command to run teh app

commit 243e6271c437bdff7512bc39dcb00d9d8e3b0848 (origin/react-components, origin/master, origin/HEAD)
Author: Nitesh <niteshp27@gmail.com>
Date:   Thu Oct 5 18:23:27 2017 +0530

    initial setup webpack, react, babel, npm,scripts, git ignore

commit 98dd2f769ffe2a2cf79b012839e615ee4f4b4f80
Author: Nitesh <niteshp27@gmail.com>
Date:   Thu Oct 5 18:16:35 2017 +0530

    Initial commit

<<<<<-----------show status of a particaular commit, note commit hash is taken after output from git log entry
PS E:\nitesh\githubrepo\vargani> git show 412dc88
commit 412dc8811d2c09f1cfefa997f3cab6ecb94eff88 (HEAD -> react-components)
Author: Nitesh <niteshp27@gmail.com>
Date:   Fri Oct 6 13:33:59 2017 +0530

    added git commands and node command to run teh app

diff --git a/cmds.txt b/cmds.txt
new file mode 100644
index 0000000..73d3369
--- /dev/null
+++ b/cmds.txt
@@ -0,0 +1,34 @@
+-----------Check if git is setup and initialized
+PS E:\nitesh\githubrepo\vargani> git status
+On branch master
+Your branch is ahead of 'origin/master' by 1 commit.
+  (use "git push" to publish your local commits)
+
+nothing to commit, working tree clean
+
+-----------check branches and * poinst to current branch
:

<<<<<-----------should type :q to exit from git show.

#######################
<<<<<-----------Push changes to branch react-components. 

E.G.- git push origin repo-name

#######################
Pull changes from master to local master branch to update it.



_____________________________________________________________________________________________________________________



PS E:\nitesh\githubrepo\vargani> git push origin react-components
Counting objects: 5, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (5/5), done.
Writing objects: 100% (5/5), 873 bytes | 873.00 KiB/s, done.
Total 5 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/niteshp27/vargani.git
   243e627..412dc88  react-components -> react-components


<<<<<-----------To merge react-components with master, run the following (after first making sure the master branch is active). 
Then later delete react-components branch if needed.
git checkout master
git merge react-components




#######################
Extra cmd if required

<<<<<-----------The branches we've just created are based on the latest commit of the current active branch—which in our case is master. 
If you want to create a branch (say old_commit_branch) based on a certain commit—such as cafb55d—you can run the following command:
E.G.- git checkout -b old_commit_branch commit-id


<<<<<-----------Go to current branch and then rename it-
E.G.- git branch -m renamed_branch

<<<<<-----------Delete a branch
E.G.- git branch -d new_test_branch  --Always use "-d" and not "-D" as "-d" will not delete branch if commits are not pushed and we will not loose work.



_____________________________________________________________________________________________________________________


<<<<<<<<<<PS E:\nitesh\githubrepo\vargani> git push origin react-components
Counting objects: 4, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 2.95 KiB | 2.95 MiB/s, done.
Total 4 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/niteshp27/vargani.git
   412dc88..48f2926  react-components -> react-components
PS E:\nitesh\githubrepo\vargani> git status
On branch react-components
Your branch is up-to-date with 'origin/react-components'.
nothing to commit, working tree clean


<<<<<<<<<<//merge with remote and local branch
PS E:\nitesh\githubrepo\vargani> git merge react-components


<<<<<<<<<<
PS E:\nitesh\githubrepo\vargani> git checkout master
Switched to branch 'master'
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)
  

PS E:\nitesh\githubrepo\vargani> git branch
* master
  react-components


<<<<<<<<<<<<<<<<<<<<<<<<----------


Pushing to a remote
Use git push to push commits made on your local branch to a remote repository.
The git push command takes two arguments:
A remote name, for example, origin
A branch name, for example, master
For example:

git push  <REMOTENAME> <BRANCHNAME> 
As an example, you usually run git push origin master to push your local changes to your online repository.

Renaming branches
To rename a branch, you'd use the same git push command, but you would add one more argument: the name of the new branch. For example:

git push  <REMOTENAME> <LOCALBRANCHNAME>:<REMOTEBRANCHNAME> 
This pushes the LOCALBRANCHNAME to your REMOTENAME, but it is renamed to REMOTEBRANCHNAME.
  
  
PS E:\nitesh\githubrepo\vargani> git push
Counting objects: 13, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (13/13), done.
Writing objects: 100% (13/13), 1.76 KiB | 1.76 MiB/s, done.
Total 13 (delta 8), reused 0 (delta 0)
remote: Resolving deltas: 100% (8/8), completed with 4 local objects.
To https://github.com/niteshp27/vargani.git
   59dc1f9..a2fa581  master -> master

   
<<<<<<<<<<<<<<<<<<<<<<<<----------   

By default, and without additional parameters, git push sends all matching branches that have the same names as remote branches.
To push a single tag, you can issue the same command as pushing a branch:
git push [remote] [branch] 

To push all your tags, you can type the command:
git push  <REMOTENAME> --tags   
   
  
   
<<<<<<<<<<<<<<<<<<<<<<<<----------



Fetch & Merge
Merging combines your local changes with changes made by others.
Typically, you'd merge a remote-tracking branch (i.e., a branch fetched from a remote repository) with your local branch:

git merge remotename/branchname     [remotename: https://github.com/user/repo.git, branchname:master]

# Merges updates made online with your local work

OR   #######################################################

Pull
git pull is a convenient shortcut for completing both git fetch and git mergein the same command:

Note:- save local work before pull.
git pull remotename branchname    [remotename: https://github.com/user/repo.git, branchname:master]

# Grabs online updates and merges them with your local work
Because pull performs a merge on the retrieved changes, you should ensure that your local work is committed before running the pull command. If you run into a merge conflict you cannot resolve, or if you decide to quit the merge, you can use git merge --abort to take the branch back to where it was in before you pulled.



PS E:\nitesh\githubrepo\vargani> git merge master
Already up-to-date.


  
  
/////  
PS E:\nitesh\githubrepo\vargani> git branch -d react-components 

  
  
/////  merge local copy to master branch
PS E:\nitesh\githubrepo\vargani> git merge origin/master
Merge made by the 'recursive' strategy.
 cmds.txt       | 175 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 nodecmds.txt   |  59 +++++++++++++++++++
 src/.gitignore |   4 +-
 3 files changed, 237 insertions(+), 1 deletion(-)
 create mode 100644 cmds.txt
 create mode 100644 nodecmds.txt
 
 
 _____________new breach and same process again
 
 PS E:\nitesh\githubrepo\vargani> git branch "gitcmd2"./